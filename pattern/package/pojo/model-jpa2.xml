<package xmlns="http://www.firstbase.nl/xsd/personaliom/pattern"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.firstbase.nl/xsd/personaliom/pattern http://www.firstbase.nl/xsd/personaliom/pattern.xsd"
  name="${pattern.property.model.implementation.package}"
  path="${pattern.property.directory.core}/${pattern.property.java.main.directory}"
  package="domain_model"
  skip="true">
  <class name="BaseModel" visibility="public" abstract="true">
    <libraries>
      <library>javax.persistence.MappedSuperclass</library>
    </libraries>
    <annotation>@MappedSuperclass</annotation>
    <attribute name="version" access="rw">
      <library>javax.persistence.Version</library>
      <library>javax.persistence.Column</library>
      <datatype>Integer</datatype>
      <apicomment>version number to implement optimistic locking</apicomment>
      <annotation>@Version</annotation>
      <annotation>@Column(name="version", nullable= false, columnDefinition = "integer DEFAULT 0")</annotation>
    </attribute>
    <operation name="getId" abstract="true">
    	<parameter name="return"><datatype>Long</datatype></parameter>
    </operation>
  </class>
  <class name="${pattern.property.model.implementation.class}" visibility="public" enum="${model.property.object.enum}" foreach="object">
    <libraries>
      <library>java.io.Serializable</library>
      <library condition="${model.property.object.enum}!=true">javax.persistence.Entity</library>
      <library condition="${model.property.object.enum}!=true">javax.persistence.Table</library>
      <library condition="${fmsnippet.condition.composite_pk_and_no_enum}">javax.persistence.IdClass</library>
    </libraries>
    <annotation condition="${model.property.object.enum}!=true">@Entity</annotation>
    <annotation condition="${fmsnippet.condition.composite_pk_and_no_enum}">@IdClass(${pattern.property.pk_composite.class}.class)</annotation>
    <annotation condition="${model.property.object.enum}!=true">${snippet.java.annotation.jpa.table}</annotation>
    <inherits condition="${model.property.object.enum}!=true">BaseModel</inherits>
    <implements>Serializable</implements>
    <enumConstants condition="${model.property.object.enum}==true">${fmsnippet.java.pojo.enum.enumConstants}</enumConstants>

    <attribute name="LOG" visibility="private" static="true" final="true" condition="${pattern.property.debug.pojo}==true">
      <library>org.slf4j.Logger</library>
      <library>org.slf4j.LoggerFactory</library>
      <datatype>Logger</datatype>
      <body>LoggerFactory.getLogger(${generated.class.name}.class.getName())</body>
    </attribute>

    <attribute name="serialVersionUID" visibility="private" static="true" final="true">
      <datatype>long</datatype>
      <body>${fmsnippet.java.pojo.attribute.serialVersionUID}</body>
    </attribute>
    <attribute name="${pattern.property.pk}" access="rw" condition="${fmsnippet.condition.simple_pk_and_no_enum}">
      <library>javax.persistence.Column</library>
      <library>javax.persistence.Id</library>
      <library>javax.persistence.GenerationType</library>
      <library>javax.persistence.GeneratedValue</library>
      <datatype>Long</datatype>
      <apicomment>primary key</apicomment>
      <annotation>@Id</annotation>
      <annotation>@Column(name="${allLower(${object.name})}_id", unique = true, nullable = false)</annotation>
      <annotation>@GeneratedValue(strategy=GenerationType.AUTO)</annotation>
<!--
      <annotation>@GeneratedValue(strategy=GenerationType.SEQUENCE)</annotation>
 -->
    </attribute>
<!--
    Onderstaand attribuut zou ik kunnen gebruiken, maar er zijn in jpa2 2 mogelijkheden om om te gaan
    met composite primary keys (zie http://www.coderanch.com/t/486475/ORM/java/JPA-composite-primary-key-classes onderaan)
    Ik kies er nu voor om alle velden die in de composite primary key gebruikt worden te voorzien van @Id

    <attribute name="${pattern.property.pk_composite.name}" access="rw" condition="${fmsnippet.condition.composite_pk_and_no_enum}">
      <library>javax.persistence.EmbeddedId</library>
      <datatype>${pattern.property.pk_composite.class}</datatype>
      <apicomment>composite primary key</apicomment>
      <annotation.getter>@EmbeddedId</annotation.getter>
    </attribute>
 -->
    <attribute name="created" access="rw" condition="${model.property.object.audit.create}=true">
      <library>javax.persistence.Column</library>
      <library>javax.validation.constraints.NotNull</library>
      <datatype>Date</datatype>
      <apicomment>Creation time of record</apicomment>
      <annotation>@Column(name="created", nullable = false)</annotation>
      <annotation>@NotNull</annotation>
    </attribute>
    <attribute name="creator" access="rw" condition="${model.property.object.audit.create}=true">
      <library>javax.persistence.Column</library>
      <library>javax.validation.constraints.NotNull</library>
      <datatype>String</datatype>
      <apicomment>Username who created this record</apicomment>
      <annotation>@Column(name="creator", nullable = false)</annotation>
      <annotation>@NotNull</annotation>
    </attribute>
    <attribute name="modified" access="rw" condition="${model.property.object.audit.modify}=true">
      <library>javax.persistence.Column</library>
      <library>javax.validation.constraints.NotNull</library>
      <datatype>Date</datatype>
      <apicomment>Modification time of record</apicomment>
      <annotation>@Column(name="modified", nullable = false)</annotation>
      <annotation>@NotNull</annotation>
    </attribute>
    <attribute name="modifier" access="rw" condition="${model.property.object.audit.modify}=true">
      <library>javax.persistence.Column</library>
      <library>javax.validation.constraints.NotNull</library>
      <datatype>String</datatype>
      <apicomment>Username who modified this record</apicomment>
      <annotation>@Column(name="modifier", nullable = false)</annotation>
      <annotation>@NotNull</annotation>
    </attribute>
    <attribute name="${attribute.name}" foreach="attribute" access="rw">
      <library>javax.persistence.Column</library>
      <library condition="${model.property.attribute.database.pk.composite}==true">javax.persistence.Id</library>
      <datatype>${attribute.type}</datatype>
      <apicomment>${fmsnippet.java.pojo.attribute.apicomment}</apicomment>
      <annotation condition="${model.property.attribute.database.pk.composite}==true">@Id</annotation>
      <annotation>${snippet.java.annotation.jpa.column}</annotation>
      <annotation>${snippet.java.annotation.constraints.required}</annotation>
      <annotation>${snippet.java.annotation.constraints.min}</annotation>
      <annotation>${snippet.java.annotation.constraints.max}</annotation>
      <annotation>${snippet.java.annotation.constraints.size}</annotation>
      <annotation>${snippet.java.annotation.constraints.email}</annotation>
      <annotation>${snippet.java.annotation.constraints.future}</annotation>
      <annotation>${snippet.java.annotation.constraints.past}</annotation>
      <body condition="${propertyExists(${model.property.attribute.entity.default.value})}">${model.property.attribute.entity.default.value}</body>
      <setterBody>${fmsnippet.java.pojo.operation.setter}</setterBody>
    </attribute>
    <attribute name="${reference.name}" foreach="reference" access="rw" condition="${fmsnippet.condition.reference_1_and_enum}">
      <library>javax.persistence.Column</library>
      <datatype>${pattern.property.model.implementation.reference}</datatype>
      <annotation>${snippet.java.annotation.jpa.column_enum}</annotation>
      <annotation>${snippet.java.annotation.constraints.required_enum}</annotation>
    </attribute>
    <attribute name="${reference.name}" foreach="reference" access="rw" condition="${fmsnippet.condition.reference_1_no_enum}"> <!-- ${reference.multiplicity}=0..1 OR ${reference.multiplicity}=1..1 -->
      <library>javax.persistence.JoinColumn</library>
      <library condition="${model.property.reference.database.pk.composite}==true">javax.persistence.Id</library>
      <datatype>${pattern.property.model.implementation.reference}</datatype>
      <annotation condition="${model.property.reference.database.pk.composite}==true">@Id</annotation>
      <annotation>${snippet.java.annotation.jpa.joincolumn}</annotation>
      <annotation>${snippet.java.annotation.jpa.manytoone}</annotation>
      <setterBody>${fmsnippet.java.pojo.operation.setReference}</setterBody>
    </attribute>
    <attribute name="${reference.name}Set" foreach="reference" access="rw" condition="${reference.multiplicity}=0..n">
      <library>java.util.HashSet</library>
      <library>java.util.Set</library>
      <library>javax.persistence.FetchType</library>
      <library>javax.persistence.OneToMany</library>
      <library>javax.persistence.CascadeType</library>
      <datatype>
        <![CDATA[Set<${pattern.property.model.implementation.reference}>]]>
      </datatype>
      <annotation>${snippet.java.annotation.jpa.onetomany}</annotation>
      <body>
        <![CDATA[new HashSet<${pattern.property.model.implementation.reference}>()]]>
      </body>
    </attribute>
    <attribute name="${reference.name}Set" foreach="reference" access="rw" condition="${reference.multiplicity}=1..n">
      <library>java.util.HashSet</library>
      <library>java.util.Set</library>
      <library>javax.persistence.FetchType</library>
      <library>javax.persistence.OneToMany</library>
      <library>javax.persistence.CascadeType</library>
      <datatype>
        <![CDATA[Set<${pattern.property.model.implementation.reference}>]]>
      </datatype>
      <annotation>${snippet.java.annotation.jpa.onetomany}</annotation>
      <body>
        <![CDATA[new HashSet<${pattern.property.model.implementation.reference}>()]]>
      </body>
    </attribute>
    <operation name="constructor" condition="${model.property.object.enum}!=true">
      <apicomment>Default constructor which loads defaults by using method loadDefaults</apicomment>
      <body>this(true);</body>
    </operation>
    <operation name="constructor" condition="${model.property.object.enum}!=true">
      <apicomment evaluate="true">Constructor with option to load defaults</apicomment>
      <parameter name="loadDefaults">
        <datatype>boolean</datatype>
      </parameter>
      <body>if (loadDefaults)
      {
        loadDefaults();
      }</body>
    </operation>
    <operation name="constructor" condition="${fmsnippet.condition.simple_pk_and_no_enum}">
      <apicomment>Constructor with primary key as parameter</apicomment>
      <parameter name="${pattern.property.pk}">
        <datatype>Long</datatype>
      </parameter>
      <body>this.${pattern.property.pk} = ${pattern.property.pk};</body>
    </operation>

    <operation name="constructor" visibility="${fmsnippet.attribute.visibility_of_constructor}" foreach="currentModelObject.property.createConstructor" var0="${forEachPropertyValue}">
      <parameter name="${attribute.name}" foreach="attribute.property.useInConstructor" condition="${forEachPropertyValue}=${var0}">
        <datatype> ${attribute.type}</datatype>
      </parameter>
      <parameter name="${reference.name}" foreach="reference.property.useInConstructor" condition="${forEachPropertyValue}=${var0}">
        <datatype> ${reference.type}</datatype>
      </parameter>
      <body>${fmsnippet.java.pojo.operation.constructor.constructor-use-fields} </body>
    </operation>
    <operation name="getId">
    	<annotation>@Override</annotation>
    	<parameter name="return"><datatype>Long</datatype></parameter>
    	<body>
    		return get${firstUpper(${pattern.property.pk})}();
    	</body>
    </operation>

    <operation name="addTo${firstUpper(${reference.name})}" foreach="reference" condition="${reference.multiplicity}=0..n OR ${reference.multiplicity}=1..n">
      <parameter name="${firstLower(${reference.name})}">
        <datatype>${pattern.property.model.implementation.reference}</datatype>
      </parameter>
      <body>${fmsnippet.java.pojo.operation.addToSet}</body>
    </operation>
    <operation name="deleteFrom${firstUpper(${reference.name})}" foreach="reference" condition="${reference.multiplicity}=0..n OR ${reference.multiplicity}=1..n">
      <parameter name="${firstLower(${reference.name})}">
        <datatype>${pattern.property.model.implementation.reference}</datatype>
      </parameter>
      <body>${fmsnippet.java.pojo.operation.deleteFromSet}</body>
    </operation>


    <operation name="equals" condition="${fmsnippet.condition.simple_pk_and_no_enum}">
      <parameter name="return">
        <datatype>
          <![CDATA[boolean]]>
        </datatype>
      </parameter>
      <parameter name="other">
        <datatype>
          <![CDATA[Object]]>
        </datatype>
      </parameter>
      <body>${fmsnippet.java.pojo.operation.equals.equals-pk-bk-support-compositePk}</body>
    </operation>
    <operation name="equalsByPK" condition="${fmsnippet.condition.simple_pk_and_no_enum}">
      <apicomment>
        <![CDATA[Return true if primary keys are equal (and not null), otherwise false]]>
      </apicomment>
      <parameter name="return">
        <datatype>
          <![CDATA[boolean]]>
        </datatype>
      </parameter>
      <parameter name="${firstLower(${object.name})}">
        <datatype><![CDATA[${pattern.property.model.implementation.class}]]></datatype>
      </parameter>
      <body><!-- Make sure to use the getter of the primarykeys so it works with proxied objects -->
        <![CDATA[return this.get${firstUpper(${pattern.property.pk})}().equals(${firstLower(${object.name})}.get${firstUpper(${pattern.property.pk})}());]]>
      </body>
    </operation>

    <operation name="equalsByBK" visibility="public" condition="${model.property.object.enum}!=true">
      <!--  condition="${model.property.object.enum}!=true" -->
      <apicomment>FIXME define businesskeys in model</apicomment>
      <parameter name="return">
        <datatype>boolean</datatype>
      </parameter>
      <parameter name="${firstLower(${object.name})}">
        <datatype>${pattern.property.model.implementation.class}</datatype>
      </parameter>
      <body>${fmsnippet.java.pojo.operation.equals.equals-use-businesskey}</body>
    </operation>

    <operation name="hashCode" condition="${model.property.object.enum}!=true">
      <apicomment>FIXME define businesskeys in model</apicomment>
      <parameter name="return">
        <datatype>integer</datatype>
      </parameter>
      <body>${fmsnippet.java.pojo.operation.hashcode.hashCode-use-businesskey}</body>
    </operation>
    <operation name="toString">
      <parameter name="return">
        <datatype>String</datatype>
      </parameter>
      <body>${fmsnippet.java.pojo.operation.tostring.toString-use-businesskey}</body>
    </operation>

    <operation name="loadDefaults" condition="${model.property.object.enum}!=true">
      <apicomment>load default values of some fields</apicomment>
      <body>${fmsnippet.java.pojo.operation.loadDefaults}</body>
    </operation>

  </class>


  <class name="${pattern.property.pk_composite.class}" visibility="public" enum="false" condition="${fmsnippet.condition.composite_pk_and_no_enum}" foreach="object">
    <apicomment>Composite primary key class used for entity ${object.name}</apicomment>
    <libraries>
        <library>java.io.Serializable</library>
    </libraries>
    <implements>Serializable</implements>
    <attribute name="serialVersionUID" visibility="private" static="true" final="true">
      <datatype>long</datatype>
      <body>${model.property.object.serialVersionUID}</body>
    </attribute>
    <attribute name="${attribute.name}" access="rw" foreach="attribute" condition="${model.property.attribute.database.pk.composite}==true">
        <datatype>${attribute.type}</datatype>
        <apicomment>The field ${attribute.name} of ${object.name} is used as composite primary key. The value of ${attribute.name} (${object.name}.${attribute.name}) is saved in this field.</apicomment>
    </attribute>
    <attribute name="${reference.name}" access="rw" foreach="reference" condition="${model.property.reference.database.pk.composite}==true">
        <datatype>Long</datatype>
        <apicomment>The foreign key ${reference.name} of ${object.name} is used as composite primary key. The id of the ${reference.name} (${object.name}.${reference.name}) it references is saved in this field.</apicomment>
    </attribute>
    <operation name="equals">
      <parameter name="return">
        <datatype>boolean</datatype>
      </parameter>
      <parameter name="other">
        <datatype>Object</datatype>
      </parameter>
      <body>${fmsnippet.java.pojo.jpa2.compositepk.equals}</body>
    </operation>
    <operation name="hashCode">
      <parameter name="return">
        <datatype>integer</datatype>
      </parameter>
      <body>${fmsnippet.java.pojo.jpa2.compositepk.hashcode}</body>
    </operation>
    <operation name="toString">
      <parameter name="return">
        <datatype>String</datatype>
      </parameter>
      <body>${fmsnippet.java.pojo.jpa2.compositepk.tostring}</body>
    </operation>
  </class>
</package>
